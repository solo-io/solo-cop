# Code generated by skv2. DO NOT EDIT.

# Common values shared across components. When applicable, these can be overridden in specific components.
common:
    # Namespace to install add-on components into, such as the Gloo external auth and rate limiting services.
    addonNamespace: gloo-mesh-addons
    # Namespace to install control plane components into. The admin namespace also contains global configuration, such as Workspace, global overrides WorkspaceSettings, and KubernetesCluster resources.
    adminNamespace: ""
    # Name of the cluster. Be sure to modify this value to match your cluster's name.
    cluster: ""
    # The local cluster domain suffix this cluster is configured with. Defaults to 'cluster.local'.
    clusterDomain: ""
    # Set to true to enable development mode for the logger, which can cause panics. Do not use in production.
    devMode: false
    # Permit unencrypted and unauthenticated communication between Gloo control and data planes. Do not use in production.
    insecure: false
    # Enable leader election for the high-availability deployment.
    leaderElection: true
    # Prometheus server address.
    prometheusUrl: http://prometheus-server
    # If true, the deployment only reads Istio resource outputs that are created by Gloo Platform, and filters out Istio resource fields that Gloo Mesh cannot properly unmarshal. These other resource outputs are not visible in the Gloo UI.
    readOnlyGeneratedResources: false
    # Enable verbose/debug logging.
    verbose: false
# Demo-specific features that improve quick setups. Do not use in production.
demo:
    # Automatically create the add-on namespace set in 'common.addonNamespace'.
    manageAddonNamespace: false
# Experimental features for Gloo Platform. Disabled by default. Do not use in production.
experimental:
    # Allow Gloo Mesh to create Istio Ambient Mesh resources.
    ambientEnabled: false
    # Enable asynchronous writing of statuses to Kubernetes objects.
    asyncStatusWrites: false
# Configuration for the Gloo external authentication service.
extAuthService:
    # Enable the Gloo external authentication service.
    enabled: false
    # Configuration for the extauth service.
    extAuth:
        # Headers that will be redacted in the server logs.
        headersToRedact:
            - authorization
        # When receiving a termination signal, the pod waits this amount of seconds for a request that it can use to notify Envoy that it should fail the health check for this endpoint. If no request is received within this interval, the server will shutdown gracefully. The interval should be greater than the active health check interval configured in Envoy for this service.
        healthCheckFailTimeout: 15
        # Path for Envoy health checks.
        healthCheckHttpPath: /healthcheck
        # Path for liveness health checks.
        healthLivenessCheckHttpPath: /livenesscheck
        # Values for the extauth image.
        image:
            # Image pull policy.
            pullPolicy: IfNotPresent
            # Image registry.
            registry: gcr.io/gloo-mesh
            # Image name (repository).
            repository: ext-auth-service
            # Version tag for the container.
            tag: 0.35.2
        # Severity level to collect logs for.
        logLevel: INFO
        # Directory in which the server expects Go plugin .so files.
        pluginDirectory: /auth-plugins/
        # Values for the container resource requests.
        resources:
            # Minimum amount of compute resources required. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
            requests:
                # Amount of CPU resource.
                cpu: 125m
                # Amount of memory resource.
                memory: 256Mi
        # Configuration for the deployed extauth service.
        service:
            # Only relevant if the service is of type NodePort.
            debugNodePort: 32001
            # Port on the extauth server to pull logs from.
            debugPort: 9091
            # Only relevant if the service is of type NodePort.
            grpcNodePort: 32000
            # Port the extauth server listens on for gRPC requests.
            grpcPort: 8083
            # Only relevant if the service is of type NodePort.
            healthNodePort: 32002
            # Port the extauth server listens on for health checks.
            healthPort: 8082
            # Kubernetes servie type.
            type: ClusterIP
        # Provide the server's secret signing key. If empty, a random key is generated.
        signingKey: ""
        # Mount the secret as a file rather than pass the signing key as a environment variable. To ensure maximum security by default, the file is limited to 0440 permissions and the fsGroup matches the runAsGroup.
        signingKeyFile:
            # Mount the secret as a file.
            enabled: false
            # File permission.
            fileMode: 288
            # Group ID for volume ownership.
            fsGroup: 10101
            # Set to true to use a volume group.
            groupSettingEnabled: true
            # Group ID for the container to run as.
            runAsGroup: 10101
            # User ID for the container to run as.
            runAsUser: 10101
        # User ID header.
        userIdHeader: ""
        # Namespaces to watch in your cluster. If omitted or empty, all namespaces are watched.
        watchNamespace: ""
    # Extra key-value pairs to add to the labels data of the extauth deployment.
    extraLabels: null
    # Extra annotations to add to the extauth service pods.
    extraTemplateAnnotations:
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
# Configuration for the Gloo agent.
glooAgent:
    # Number of access logs to buffer per Envoy proxy.
    accessLogsBufferSize: 50
    # Set to true to enable development mode for the logger, which can cause panics. Do not use in production.
    devMode: false
    # Configuration for the Gloo agent.
    enabled: false
    # Environment variables for the container. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envvarsource-v1-core).
    env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
                fieldPath: metadata.namespace
    # Allow the pod to be assigned a dynamic user ID. Required for OpenShift installations.
    floatingUserId: false
    # Container image.
    image:
        # Image pull policy.
        pullPolicy: IfNotPresent
        # Image registry.
        registry: gcr.io/gloo-mesh
        # Image name (repository).
        repository: gloo-mesh-agent
        # Version tag for the container image.
        tag: 2.3.3-9-g9abdd6781
    # Permit unencrypted and unauthenticated communication between Gloo control and data planes. Do not use in production.
    insecure: false
    # Configuration for the istiod sidecar deployment.
    istiodSidecar:
        # Create the cluster role binding for the istiod sidecar.
        createRoleBinding: false
        # Object reference for the istiod service account.
        istiodServiceAccount:
            name: istiod
            namespace: istio-system
    # Enable leader election for the high-availability deployment.
    leaderElection: false
    # Maximum message size for gRPC messages sent and received by the management server.
    maxGrpcMessageSize: "4294967295"
    # Number of metrics messages to buffer per Envoy proxy.
    metricsBufferSize: 50
    # Service ports as a map from port name to port number.
    ports:
        grpc: 9977
        http: 9988
        stats: 9091
    # If true, the deployment only reads Istio resource outputs that are created by Gloo Platform, and filters out Istio resource fields that Gloo Mesh cannot properly unmarshal. These other resource outputs are not visible in the Gloo UI.
    readOnlyGeneratedResources: false
    # Configuration for securing relay communication between the workload agents and the management server.
    relay:
        # SNI name in the authority/host header used to connect to relay forwarding server. Must match server certificate CommonName. Do not change the default value.
        authority: gloo-mesh-mgmt-server.gloo-mesh
        # Custom certs: Secret containing client TLS certs used to identify the Gloo agent to the management server. If you do not specify a clientTlssSecret, you must specify a tokenSecret and a rootTlsSecret.
        clientTlsSecret:
            name: relay-client-tls-secret
        # The ratio of the client TLS certificate lifetime to when the management server starts the certificate rotation process.
        clientTlsSecretRotationGracePeriodRatio: ""
        # Secret containing a root TLS cert used to verify the management server cert. The secret can also optionally specify a 'tls.key', which is used to generate the agent client cert.
        rootTlsSecret:
            name: relay-root-tls-secret
        # Address and port by which gloo-mesh-mgmt-server in the Gloo control plane can be accessed by the Gloo workload agents.
        serverAddress: ""
        # Secret containing a shared token for authenticating Gloo agents when they first communicate with the management server. A token secret is not needed with ACM certs.
        tokenSecret:
            # Key value of the data within the Kubernetes secret.
            key: token
            # Name of the Kubernetes secret.
            name: relay-identity-token-secret
            # Namespace of the Kubernetes secret.
            namespace: ""
    # Container resource requirements. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#resourcerequirements-v1-core).
    resources:
        requests:
            cpu: 50m
            memory: 128Mi
    # Static user ID to run the containers as. Unused if floatingUserId is 'true'.
    runAsUser: 10101
    # Kubernetes service type. Can be either "ClusterIP", "NodePort", "LoadBalancer", or "ExternalName".
    serviceType: ClusterIP
    # Optional configuration for the deployed containers.
    sidecars: {}
    # Enable verbose/debug logging.
    verbose: false
# Configuration for the Gloo management server.
glooMgmtServer:
    # Configuration for automatic discovery of CloudResources.
    cloudResourcesDiscovery:
        # Enable automated discovery of CloudResources, such as AWS Lambda functions, based on CloudProvider configuration.
        enabled: true
        # Polling interval (in seconds) for calling AWS when attempting to discover CloudResources.
        pollingInterval: 10
    # Concurrency to use for translation operations.
    concurrency: 10
    # Set to true to enable development mode for the logger, which can cause panics. Do not use in production.
    devMode: false
    # Experimental: Enable cluster load balancing. The management server replicas attempt to auto-balance the number of registered workload clusters, based on the number of replicas and the number of total clusters. For example, the server might disconnect a workload cluster if the number of connected clusters is greater than the allotted number.
    enableClusterLoadBalancing: false
    # Enable creation of the deployment/service.
    enabled: false
    # Environment variables for the container. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envvarsource-v1-core).
    env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
                fieldPath: metadata.namespace
        - name: POD_UID
          valueFrom:
            fieldRef:
                fieldPath: metadata.uid
        - name: LICENSE_KEY
          valueFrom:
            secretKeyRef:
                key: key
                name: gloo-mesh-enterprise-license
                optional: true
        - name: REDIS_USERNAME
          valueFrom:
            secretKeyRef:
                key: username
                name: redis-auth-secrets
                optional: true
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
                key: password
                name: redis-auth-secrets
                optional: true
    # Allow the pod to be assigned a dynamic user ID. Required for OpenShift installations.
    floatingUserId: false
    # Container image.
    image:
        # Image pull policy.
        pullPolicy: IfNotPresent
        # Image registry.
        registry: gcr.io/gloo-mesh
        # Image name (repository).
        repository: gloo-mesh-mgmt-server
        # Version tag for the container image.
        tag: 2.3.3-9-g9abdd6781
    # Permit unencrypted and unauthenticated communication between Gloo control and data planes. Do not use in production.
    insecure: false
    # Enable leader election for the high-availability deployment.
    leaderElection: false
    # Maximum message size for gRPC messages sent and received by the management server.
    maxGrpcMessageSize: "4294967295"
    # Service ports as a map from port name to port number.
    ports:
        grpc: 9900
        healthcheck: 8090
    # If true, the deployment only reads Istio resource outputs that are created by Gloo Platform, and filters out Istio resource fields that Gloo Mesh cannot properly unmarshal. These other resource outputs are not visible in the Gloo UI.
    readOnlyGeneratedResources: false
    # Register the management cluster by deploying a Gloo agent to the cluster alongside the management server, such as for single-cluster Gloo Gateway, quickstart, or testing setups. This setting is not recommended for multicluster or production setups.
    registerCluster: false
    # Configuration for certificates to secure server-agent relay communication. Required only for multicluster setups.
    relay:
        # To disable relay CA functionality, set to true. Set to true only when you supply your custom client certs to the agents for relay mTLS. The gloo-mesh-mgmt-server pod will not require a token secret or the signing cert secret. The agent pod will not require the token secret, but will fail without a client cert.
        disableCa: false
        # Do not auto-generate self-signed CA certificates. Set to true only when you supply own.
        disableCaCertGeneration: false
        # Do not create the relay token Kubernetes secret. Set to true only when you supply own.
        disableTokenGeneration: false
        # Push RBAC resources to the management server. Required for multicluster RBAC in the Gloo UI.
        pushRbac: true
        # Secret containing TLS certs used to sign CSRs created by workload agents.
        signingTlsSecret:
            name: relay-tls-signing-secret
        # Secret containing client TLS certs used to secure the management server.
        tlsSecret:
            name: relay-server-tls-secret
        # Secret containing a shared token for authenticating Gloo agents when they first communicate with the management server.
        tokenSecret:
            # Key value of the data within the Kubernetes secret.
            key: token
            # Name of the Kubernetes secret.
            name: relay-identity-token-secret
            # Namespace of the Kubernetes secret.
            namespace: ""
    # Container resource requirements. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#resourcerequirements-v1-core).
    resources:
        requests:
            cpu: 125m
            memory: 1Gi
    # Static user ID to run the containers as. Unused if floatingUserId is 'true'.
    runAsUser: 10101
    # Service account configuration to use for the management server deployment.
    serviceAccount:
        # Extra annotations to add to the service account.
        extraAnnotations: null
    # Kubernetes service type. Can be either "ClusterIP", "NodePort", "LoadBalancer", or "ExternalName".
    serviceType: LoadBalancer
    # Optional configuration for the deployed containers.
    sidecars: {}
    # Port on the management server deployment to pull stats from.
    statsPort: 9091
    # Enable verbose/debug logging.
    verbose: false
# Gloo Network configuration options.
glooNetwork:
    # Enable translation of network policies to enforce access policies and service isolation.
    enabled: false
glooPortalServer:
    apiKeyStorage:
        # Path for API key storage config file
        configPath: /etc/apikeys/storage-config.yaml
        secretKey: change this
        # Backend storage for API keys. Supported values: "redis"
        type: redis
    # Set to true to enable development mode for the logger, which can cause panics. Do not use in production.
    devMode: false
    # Enable creation of the deployment/service.
    enabled: false
    # Environment variables for the container. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envvarsource-v1-core).
    env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
                fieldPath: metadata.namespace
        - name: APIKEY_STORAGE_SECRET_KEY
          valueFrom:
            secretKeyRef:
                key: key
                name: portal-storage-secret-key
    # Allow the pod to be assigned a dynamic user ID. Required for OpenShift installations.
    floatingUserId: false
    # Container image.
    image:
        # Image pull policy.
        pullPolicy: IfNotPresent
        # Image registry.
        registry: gcr.io/gloo-mesh
        # Image name (repository).
        repository: gloo-mesh-portal-server
        # Version tag for the container image.
        tag: 2.3.3-9-g9abdd6781
    # Service ports as a map from port name to port number.
    ports:
        http: 8080
    # Container resource requirements. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#resourcerequirements-v1-core).
    resources:
        requests:
            cpu: 50m
            memory: 128Mi
    # Static user ID to run the containers as. Unused if floatingUserId is 'true'.
    runAsUser: 10101
    # Kubernetes service type. Can be either "ClusterIP", "NodePort", "LoadBalancer", or "ExternalName".
    serviceType: ClusterIP
    # Optional configuration for the deployed containers.
    sidecars: {}
    # Enable verbose/debug logging.
    verbose: false
glooUi:
    # Configure authentication for the UI.
    auth:
        # Authentication backend to use. 'oidc' is supported.
        backend: ""
        # Require authentication to access the UI.
        enabled: false
        # Settings for the OpenID Connect (OIDC) backend.
        oidc:
            # URL that the UI for OIDC app is available at, from the DNS and other ingress settings that expose OIDC app UI service.
            appUrl: ""
            # OIDC client ID
            clientId: ""
            # Plaintext OIDC client secret, which will be encoded in base64 and stored in a secret named the value of 'clientSecretName'.
            clientSecret: ""
            # Name for the secret that will contain the client secret.
            clientSecretName: ""
            # Issuer URL from the OIDC provider, such as 'https://<domain>.<provider_url>/'.
            issuerUrl: ""
            # Session storage configuration. If omitted, a cookie is used.
            session:
                # Backend to use for auth session storage. 'cookie' and 'redis' are supported.
                backend: ""
                # Redis instance configuration.
                redis:
                    # Host at which the Redis instance is accessible. To use the default Redis deployment, specify 'redis.gloo-mesh.svc.cluster.local:6379'.
                    host: ""
    # Enable creation of the deployment/service.
    enabled: false
    # Environment variables for the container. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envvarsource-v1-core).
    env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
                fieldPath: metadata.namespace
        - name: LICENSE_KEY
          valueFrom:
            secretKeyRef:
                key: key
                name: gloo-mesh-enterprise-license
                optional: true
        - name: REDIS_USERNAME
          valueFrom:
            secretKeyRef:
                key: username
                name: redis-auth-secrets
                optional: true
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
                key: password
                name: redis-auth-secrets
                optional: true
    # Allow the pod to be assigned a dynamic user ID. Required for OpenShift installations.
    floatingUserId: false
    # Container image.
    image:
        # Image pull policy.
        pullPolicy: IfNotPresent
        # Image registry.
        registry: gcr.io/gloo-mesh
        # Image name (repository).
        repository: gloo-mesh-apiserver
        # Version tag for the container image.
        tag: 2.3.3-9-g9abdd6781
    # Provide license keys in a secret in the adminNamespace of the management cluster, instead of in the license key fields.
    licenseSecretName: ""
    # Service ports as a map from port name to port number.
    ports:
        console: 8090
        grpc: 10101
        healthcheck: 8081
    # Prometheus server address.
    prometheusUrl: ""
    # If true, the deployment only reads Istio resource outputs that are created by Gloo Platform, and filters out Istio resource fields that Gloo Mesh cannot properly unmarshal. These other resource outputs are not visible in the Gloo UI.
    readOnlyGeneratedResources: false
    # Container resource requirements. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#resourcerequirements-v1-core).
    resources:
        requests:
            cpu: 125m
            memory: 256Mi
    # Static user ID to run the containers as. Unused if floatingUserId is 'true'.
    runAsUser: 10101
    # Kubernetes service type. Can be either "ClusterIP", "NodePort", "LoadBalancer", or "ExternalName".
    serviceType: ClusterIP
    # Name of the UI settings object to use.
    settingsName: settings
    # Optional configuration for the deployed containers.
    sidecars:
        console:
            # Environment variables for the container. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envvarsource-v1-core).
            env: null
            # Container image.
            image:
                # Image pull policy.
                pullPolicy: IfNotPresent
                # Image registry.
                registry: gcr.io/gloo-mesh
                # Image name (repository).
                repository: gloo-mesh-ui
                # Version tag for the container image.
                tag: 2.3.3-9-g9abdd6781
            # Container resource requirements. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#resourcerequirements-v1-core).
            resources:
                requests:
                    cpu: 125m
                    memory: 256Mi
        envoy:
            # Environment variables for the container. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envvarsource-v1-core).
            env:
                - name: ENVOY_UID
                  value: "0"
            # Container image.
            image:
                # Image pull policy.
                pullPolicy: IfNotPresent
                # Image registry.
                registry: gcr.io/gloo-mesh
                # Image name (repository).
                repository: gloo-mesh-envoy
                # Version tag for the container image.
                tag: 2.3.3-9-g9abdd6781
            # Container resource requirements. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#resourcerequirements-v1-core).
            resources:
                requests:
                    cpu: 500m
                    memory: 256Mi
    # Enable verbose/debug logging.
    verbose: false
# Configuration for deploying managed Istio control plane and gateway installations by using the Istio lifecycle manager.
istioInstallations:
    # Configuration for the managed Istio control plane instance.
    controlPlane:
        # Install the managed Istio control plane instance in the cluster.
        enabled: true
        # List of Istio control plane installations.
        installations:
            - # Clusters to install the Istio control planes in.
              clusters: null
              # IstioOperator specification for the control plane. For more info, see the [IstioOperatorSpec reference](https://docs.solo.io/gloo-mesh-enterprise/latest/reference/api/istio_operator/#istiooperatorspec).
              istioOperatorSpec: {}
              # Istio revision for this installation, such as '1-17'. Label workload resources with 'istio.io/rev=$REVISION' to use this installation. Defaults to 'AUTO', which installs the default supported version of Gloo Istio.
              revision: auto
    # Configuration for the managed east-west gateway.
    eastWestGateways: null
    # Enable managed Istio installations.
    enabled: false
    # Configuration for the managed north-south (ingress) gateway. Requires a Gloo Gateway license.
    northSouthGateways:
        - # Install the gateway in the cluster.
          enabled: true
          # List of Istio gateway installations. For more info, see the [GatewayInstallation reference](https://docs.solo.io/gloo-mesh-enterprise/latest/reference/api/gateway_lifecycle_manager/#gatewayinstallation).
          installations:
            - # Clusters to install the gateway in.
              clusters: null
              # Istio revision for this installation, such as '1-17'. Defaults to 'AUTO', which installs the default supported version of Gloo Istio.
              gatewayRevision: auto
              # IstioOperator specification for the gateway. For more info, see the [IstioOperatorSpec reference](https://docs.solo.io/gloo-mesh-enterprise/latest/reference/api/istio_operator/#istiooperatorspec).
              istioOperatorSpec: {}
          # Name of the gateway. Must be unique.
          name: istio-ingressgateway
# Configuration for the legacy metrics pipeline, which uses Gloo agents to propagate metrics to the management server.
legacyMetricsPipeline:
    # Set to false to disable the legacy telemetry pipeline.
    enabled: false
# Gloo Platform product licenses.
licensing:
    # Gloo Gateway license key.
    glooGatewayLicenseKey: ""
    # Gloo Mesh Enterprise license key.
    glooMeshLicenseKey: ""
    # Gloo Network license key.
    glooNetworkLicenseKey: ""
    # Gloo trial license key, for a trial installation of all products.
    glooTrialLicenseKey: ""
    # Deprecated: Legacy Gloo Mesh Enterprise license key. Use individual product license fields, the trial license field, or a license secret instead.
    licenseKey: ""
    # Provide license keys in a secret in the adminNamespace of the management cluster, instead of in the license key fields.
    licenseSecretName: ""
# Helm values for configuring Prometheus. See the [Prometheus Helm chart](https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml) for the complete set of values.
prometheus:
    alertmanager:
        enabled: false
    enabled: false
    kubeStateMetrics:
        enabled: false
    nodeExporter:
        enabled: false
    podSecurityPolicy:
        enabled: false
    pushgateway:
        enabled: false
    rbac:
        create: true
    server:
        fullnameOverride: prometheus-server
        image:
            pullPolicy: IfNotPresent
            repository: quay.io/prometheus/prometheus
        persistentVolume:
            enabled: false
    serverFiles:
        alerting_rules.yml:
            groups:
                - name: GlooPlatformAlerts
                  rules:
                    - alert: GlooPlatformTranslationLatencyIsHigh
                      annotations:
                        runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                        summary: The translation time has increased above 10 sec. It's currently {{ $value | humanize }}.
                      expr: histogram_quantile(0.99, sum(rate(gloo_mesh_translation_time_sec_bucket[5m])) by(le)) > 10
                      for: 15m
                      labels:
                        severity: warning
                    - alert: GlooPlatformReconscilerLatencyIsHigh
                      annotations:
                        runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                        summary: The reconciliation time has increased above 80 sec. It's currently {{ $value | humanize }}.
                      expr: histogram_quantile(0.99, sum(rate(gloo_mesh_reconciler_time_sec_bucket[5m])) by(le)) > 80
                      for: 15m
                      labels:
                        severity: warning
                    - alert: GlooPlatformAgentsAreDisconnected
                      annotations:
                        runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                        summary: 'The following cluster is disconnected: {{ $labels.cluster }}. Check the Gloo Platform Agent pod in the cluster!'
                      expr: count by(cluster) (sum by(cluster) (relay_push_clients_warmed == 0)) > 0
                      for: 5m
                      labels:
                        severity: warning
                    - alert: GlooPlatformTranslationWarnings
                      annotations:
                        runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                        summary: Gloo Platform has detected {{$value | humanize}} translation warnings in the last 5m. Check your {{ $labels.gvk }} resources!
                      expr: increase(translation_warning[5m]) > 0
                      labels:
                        severity: warning
                    - alert: GlooPlatformTranslationErrors
                      annotations:
                        runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                        summary: Gloo Platform has detected {{$value | humanize}} translation errors in the last 5m. Check your {{ $labels.gvk }} resources!
                      expr: increase(translation_error[5m]) > 0
                      labels:
                        severity: warning
                    - alert: GlooPlatformRedisErrors
                      annotations:
                        runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                        summary: Gloo Platform has detected {{$value | humanize}} Redis sync errors in the last 5m.
                      expr: increase(gloo_mesh_redis_sync_err[5m]) > 0
                      labels:
                        severity: warning
        prometheus.yml:
            rule_files:
                - /etc/config/recording_rules.yml
                - /etc/config/alerting_rules.yml
                - /etc/config/rules
                - /etc/config/alerts
            scrape_configs:
                - job_name: prometheus
                  static_configs:
                    - targets:
                        - localhost:9090
                - honor_labels: true
                  job_name: otel-collector
                  kubernetes_sd_configs:
                    - namespaces:
                        names:
                            - gloo-mesh
                      role: pod
                  metric_relabel_configs:
                    - action: labeldrop
                      regex: app_kubernetes_io_instance|app_kubernetes_io_name|instance|job|pod|pod_template_hash
                  relabel_configs:
                    - action: keep
                      regex: standalone-collector
                      source_labels:
                        - __meta_kubernetes_pod_label_component
                    - action: keep
                      regex: true
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                    - action: drop
                      regex: true
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
                    - action: replace
                      regex: (https?)
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
                      target_label: __scheme__
                    - action: replace
                      regex: (.+)
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_path
                      target_label: __metrics_path__
                    - action: replace
                      regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                      replacement: '[$2]:$1'
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_port
                        - __meta_kubernetes_pod_ip
                      target_label: __address__
                    - action: replace
                      regex: (\d+);((([0-9]+?)(\.|$)){4})
                      replacement: $2:$1
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_port
                        - __meta_kubernetes_pod_ip
                      target_label: __address__
                    - action: labelmap
                      regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                      replacement: __param_$1
                    - action: labelmap
                      regex: __meta_kubernetes_pod_label_(.+)
                    - action: replace
                      source_labels:
                        - __meta_kubernetes_namespace
                      target_label: namespace
                    - action: replace
                      source_labels:
                        - __meta_kubernetes_pod_name
                      target_label: pod
                    - action: drop
                      regex: Pending|Succeeded|Failed|Completed
                      source_labels:
                        - __meta_kubernetes_pod_phase
                  scrape_interval: 30s
                  scrape_timeout: 20s
                - honor_labels: true
                  job_name: gloo-mesh-mgmt-server
                  kubernetes_sd_configs:
                    - namespaces:
                        names:
                            - gloo-mesh
                      role: pod
                  relabel_configs:
                    - action: keep
                      regex: gloo-mesh-mgmt-server|gloo-mesh-ui
                      source_labels:
                        - __meta_kubernetes_pod_label_app
                    - action: keep
                      regex: true
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                    - action: drop
                      regex: true
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
                    - action: replace
                      regex: (https?)
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
                      target_label: __scheme__
                    - action: replace
                      regex: (.+)
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_path
                      target_label: __metrics_path__
                    - action: replace
                      regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                      replacement: '[$2]:$1'
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_port
                        - __meta_kubernetes_pod_ip
                      target_label: __address__
                    - action: replace
                      regex: (\d+);((([0-9]+?)(\.|$)){4})
                      replacement: $2:$1
                      source_labels:
                        - __meta_kubernetes_pod_annotation_prometheus_io_port
                        - __meta_kubernetes_pod_ip
                      target_label: __address__
                    - action: labelmap
                      regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                      replacement: __param_$1
                    - action: labelmap
                      regex: __meta_kubernetes_pod_label_(.+)
                    - action: replace
                      source_labels:
                        - __meta_kubernetes_namespace
                      target_label: namespace
                    - action: replace
                      source_labels:
                        - __meta_kubernetes_pod_name
                      target_label: pod
                    - action: drop
                      regex: Pending|Succeeded|Failed|Completed
                      source_labels:
                        - __meta_kubernetes_pod_phase
    serviceAccounts:
        alertmanager:
            create: false
        nodeExporter:
            create: false
        pushgateway:
            create: false
        server:
            create: true
# Configuration for the Gloo rate limiting service.
rateLimiter:
    # Enable the Gloo rate limiting service.
    enabled: false
    # Extra key-value pairs to add to the labels data of the rate limiter deployment.
    extraLabels: null
    # Extra annotations to add to the rate limiter service pods.
    extraTemplateAnnotations:
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
    # Configuration for the rate limiter.
    rateLimiter:
        # Values for the rate limiter image.
        image:
            # Image pull policy.
            pullPolicy: IfNotPresent
            # Image registry.
            registry: gcr.io/gloo-mesh
            # Image name (repository).
            repository: rate-limiter
            # Version tag for the container.
            tag: 0.8.0
        # If true, use ClusterRoles. If false, use Roles.
        installClusterRoles: true
        # Severity level to collect logs for.
        logLevel: INFO
        # Ports for the rate limiter service.
        ports:
            # Port on the rate limiter to pull logs from.
            debug: 9091
            # Port the rate limiter listens on for gRPC requests.
            grpc: 8083
            # Port the rate limiter listens on for readiness checks.
            ready: 8084
        # Path for readiness checks.
        readyPath: /ready
        # Values for the container resource requests.
        resources:
            # Minimum amount of compute resources required. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
            requests:
                # Amount of CPU resource.
                cpu: 125m
                # Amount of memory resource.
                memory: 256Mi
        # Namespaces to watch in your cluster. If omitted or empty, all namespaces are watched.
        watchNamespace: ""
    # Configuration for using a Redis instance for authentication.
    redis:
        # Values for the authentication details.
        auth:
            # Use the default Redis instance for authentication.
            enabled: false
            # Key that contains the password.
            passwordKey: redis-password
            # Name of the secret that contains the username and password.
            secretName: redis-secrets
            # Key that contains the username. If Redis doesn't have an explicit username, specify 'default'.
            usernameKey: redis-username
        # Provide a CA cert for the rate limiter and Redis instance (if enabled) to use.
        certs:
            # File name that contains the CA cert.
            caCert: redis.crt
            # Enable the rate limiter and Redis instance (if enabled) to use the CA cert you provide.
            enabled: false
            # Mount path for the certs.
            mountPoint: /etc/tls
            # Name of the secret for the CA cert.
            secretName: redis-certs-keys
            # File name that contains the signing key. Only relevant for the Redis instance.
            signingKey: redis.key
        # Set to true if your Redis instance runs in clustered mode.
        clustered: false
        # Install the default Redis instance.
        enabled: true
        # Hostname clients use to connect to the Redis instance.
        hostname: redis
        # Values for the Redis image.
        image:
            # Image pull policy.
            pullPolicy: IfNotPresent
            # Image registry.
            registry: docker.io
            # Image name (repository).
            repository: redis
            # Version tag for the container.
            tag: 6.2.6
        # Values for the Redis service.
        service:
            # Name for the Redis service.
            name: redis
            # Port for the Redis service.
            port: 6379
            # 'unix', 'tcp', or 'tls' are supported.
            socket: tcp
# Redis configuration options.
redis:
    # Address to use when connecting to the Redis instance. To use the default Redis deployment, specify 'redis.gloo-mesh.svc.cluster.local:6379'.
    address: gloo-mesh-redis.gloo-mesh:6379
    # Optional authentication values to use when connecting to the Redis instance
    auth:
        # Connect to the Redis instance with a password
        enabled: false
        # The secret key containing the password to use for authentication
        passwordKey: password
        # Name of the k8s secret that contains the password
        secretName: redis-auth-secrets
        # The secret key containing the username to use for authentication
        usernameKey: username
    # Configuration for TLS verification when connecting to the Redis instance
    certs:
        # The secret key containing the ca cert
        caCertKey: ""
        # Enable a secure network connection to the Redis instance via TLS
        enabled: false
        # Name of the k8s secret that contains the certs
        secretName: redis-certs
    # Optional connection parameters
    connection:
        # Dial timeout for establishing new connections. Default is 5 seconds.
        dialTimeout: 5s
        # Frequency of idle checks made by idle connections reaper. Default is 1 minute. -1 disables idle connections reaper, but idle connections are still discarded by the client if IdleTimeout is set.
        idleCheckFrequency: 1m0s
        # Amount of time after which client closes idle connections. Should be less than server's timeout. Default is 5 minutes. -1 disables idle timeout check.
        idleTimeout: 5m0s
        # Connection age at which client retires (closes) the connection. Default is to not close aged connections.
        maxConnAge: ""
        # Maximum number of retries before giving up. Default is 3. -1 disables retries.
        maxRetries: 3
        # Maximum backoff between each retry. Default is 512 milliseconds. -1 disables backoff.
        maxRetryBackoff: 512ms
        # Minimum number of idle connections which is useful when establishing new connection is slow.
        minIdleConns: 0
        # Minimum backoff between each retry. Default is 8 milliseconds. -1 disables backoff.
        minRetryBackoff: 8ms
        # Type of connection pool. true for FIFO pool. false for LIFO pool. Note that FIFO has higher overhead compared to LIFO.
        poolFifo: false
        # Maximum number of socket connections. Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.
        poolSize: 0
        # Amount of time client waits for connection if all connections are busy before returning an error. Default is ReadTimeout + 1 second.
        poolTimeout: ""
        # Timeout for socket reads. if reached, commands will fail with a timeout instead of blocking. Default is 3 seconds. -1 disables timeout. 0 uses the default value.
        readTimeout: 3s
        # Timeout for socket writes. If reached, commands will fail with a timeout instead of blocking. Default is ReadTimeout.
        writeTimeout: ""
    # DB to connect to
    db: 0
    deployment:
        # Enable creation of the deployment/service.
        enabled: true
        # Environment variables for the container. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envvarsource-v1-core).
        env:
            - name: MASTER
              value: "true"
        # Allow the pod to be assigned a dynamic user ID. Required for OpenShift installations.
        floatingUserId: false
        # Container image.
        image:
            # Image pull policy.
            pullPolicy: IfNotPresent
            # Image registry.
            registry: docker.io
            # Image name (repository).
            repository: redis
            # Version tag for the container image.
            tag: 7.0.4
        # Service ports as a map from port name to port number.
        ports:
            redis: 6379
        # Container resource requirements. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#resourcerequirements-v1-core).
        resources:
            requests:
                cpu: 125m
                memory: 256Mi
        # Static user ID to run the containers as. Unused if floatingUserId is 'true'.
        runAsUser: 10101
        # Kubernetes service type. Can be either "ClusterIP", "NodePort", "LoadBalancer", or "ExternalName".
        serviceType: ClusterIP
        # Optional configuration for the deployed containers.
        sidecars: {}
# Experimental: Configuration for eBPF sidecar acceleration. Do not use in production.
sidecarAccel:
    # Run sidecar acceleration in debug mode.
    debug: false
    # Enable eBPF sidecar acceleration to reduce network latency in your service mesh.
    enabled: false
    # Name of the sidecar acceleration deployment.
    fullname: sidecar-accel
    # Values for the sidecar acceleration image.
    image:
        # Image registry.
        hub: us-docker.pkg.dev
        # Image pull policy.
        pullPolicy: Always
        # Image name (repository).
        repository: gloo-mesh/sidecar-accel/sidecar-accel
        # Version tag for the container.
        tag: 0.1.0
    # Namespace to deploy sidecar acceleration into.
    namespace: istio-system
    # Values for the container and init container.
    resources:
        # Resource values for the container.
        container:
            # Maximum amount of compute resources allowed. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
            limit:
                # Amount of CPU resource.
                cpu: 300m
                # Amount of memory resource.
                memory: 200Mi
            # Minimum amount of compute resources required. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
            request:
                # Amount of CPU resource.
                cpu: 100m
                # Amount of memory resource.
                memory: 200Mi
        # Resource values for the init container.
        init:
            # Maximum amount of compute resources allowed. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
            limit:
                # Amount of CPU resource.
                cpu: 300m
                # Amount of memory resource.
                memory: 50Mi
            # Minimum amount of compute resources required. For more info, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
            request:
                # Amount of CPU resource.
                cpu: 100m
                # Amount of memory resource.
                memory: 50Mi
    # Number of old ReplicaSets for the agent deployment you want to retain.
    revisionHistoryLimit: 10
# Configuration for the Gloo Platform Telemetry Collector. See the [OpenTelemetry Helm chart](https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-collector/values.yaml) for the complete set of values.
telemetryCollector:
    clusterRole:
        create: true
        rules:
            - apiGroups:
                - ""
              resources:
                - nodes
                - nodes/proxy
                - nodes/metrics
                - services
                - endpoints
                - pods
                - ingresses
                - configmaps
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - extensions
                - networking.k8s.io
              resources:
                - ingresses/status
                - ingresses
              verbs:
                - get
                - list
                - watch
            - nonResourceURLs:
                - /metrics
              verbs:
                - get
    command:
        extraArgs:
            - --config=/conf/relay.yaml
        name: gloo-otel-collector
    configMap:
        create: false
    enabled: false
    extraEnvs:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
                fieldPath: spec.nodeName
        - name: KUBE_POD_NAME
          valueFrom:
            fieldRef:
                fieldPath: metadata.name
    extraVolumeMounts:
        - mountPath: /etc/otel-certs
          name: root-ca
          readOnly: true
        - mountPath: /conf
          name: telemetry-configmap
    extraVolumes:
        - name: root-ca
          secret:
            defaultMode: 420
            secretName: relay-root-tls-secret
        - configMap:
            items:
                - key: relay
                  path: relay.yaml
            name: gloo-telemetry-collector-config
          name: telemetry-configmap
    fullnameOverride: gloo-telemetry-collector
    image:
        pullPolicy: IfNotPresent
        repository: gcr.io/gloo-mesh/gloo-otel-collector
        tag: 2.3.3-9-g9abdd6781
    mode: daemonset
    nameOverride: ""
    podAnnotations: null
    ports:
        jaeger-compact:
            hostPort: 0
        jaeger-grpc:
            hostPort: 0
        jaeger-thrift:
            hostPort: 0
        otlp:
            hostPort: 0
        otlp-http:
            hostPort: 0
        zipkin:
            hostPort: 0
    presets:
        clusterMetrics:
            enabled: false
        hostMetrics:
            enabled: false
        kubeletMetrics:
            enabled: false
        kubernetesAttributes:
            enabled: false
        logsCollection:
            enabled: false
            includeCollectorLogs: false
    replicaCount: 0
    resources:
        requests:
            cpu: 100m
            memory: 300Mi
    service: null
    tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/disk-pressure
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/memory-pressure
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/pid-pressure
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/unschedulable
          operator: Exists
# Optional customization for the Gloo Platform Telemetry Collector.
telemetryCollectorCustomization:
    # Disables the default pipeline. Useful if you want to create a custom pipeline using 'extraPipelines' and to disable the default pipeline.
    disableDefaultPipeline: false
    # Configuration for extra exporters, such as to forward your data to a third-party provider. Exporters forward the data they get to a destination on the local or remote network.
    extraExporters: null
    # Specify any added receivers, processors, or exporters in an extra pipeline.
    extraPipelines: null
    # Configuration for extra processors to drop and generate new data. Processors can transform the data before it is forwarded to another processor and an exporter.
    extraProcessors:
        batch:
            send_batch_max_size: 3000
            send_batch_size: 2000
            timeout: 600ms
        memory_limiter:
            check_interval: 1s
            limit_percentage: 85
            spike_limit_percentage: 10
    # Configuration for extra receivers, such as to scrape extra Prometheus targets. Receivers listen on a network port to receive telemetry data.
    extraReceivers: null
    # SNI and certificate subject alternative name used in the collector certificate.
    serverName: gloo-telemetry-gateway.gloo-mesh
    # Configure the service telemetry (logs and metrics) as described in the [otel-collector docs](https://opentelemetry.io/docs/collector/configuration/#service).
    telemetry:
        metrics:
            address: 0.0.0.0:8888
# Configuration for the Gloo Platform Telemetry Gateway. See the [OpenTelemetry Helm chart](https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-collector/values.yaml) for the complete set of values.
telemetryGateway:
    clusterRole:
        create: true
        rules:
            - apiGroups:
                - ""
              resources:
                - nodes
                - nodes/proxy
                - nodes/metrics
                - services
                - endpoints
                - pods
                - ingresses
                - configmaps
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - extensions
                - networking.k8s.io
              resources:
                - ingresses/status
                - ingresses
              verbs:
                - get
                - list
                - watch
            - nonResourceURLs:
                - /metrics
              verbs:
                - get
    command:
        extraArgs:
            - --config=/conf/relay.yaml
        name: gloo-otel-collector
    configMap:
        create: false
    enabled: false
    extraEnvs: null
    extraVolumeMounts:
        - mountPath: /etc/otel-certs
          name: tls-keys
          readOnly: true
        - mountPath: /conf
          name: telemetry-configmap
    extraVolumes:
        - name: tls-keys
          secret:
            defaultMode: 420
            secretName: gloo-telemetry-gateway-tls-secret
        - configMap:
            items:
                - key: relay
                  path: relay.yaml
            name: gloo-telemetry-gateway-config
          name: telemetry-configmap
    fullnameOverride: gloo-telemetry-gateway
    image:
        pullPolicy: IfNotPresent
        repository: gcr.io/gloo-mesh/gloo-otel-collector
        tag: 2.3.3-9-g9abdd6781
    mode: deployment
    nameOverride: ""
    podAnnotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    ports:
        jaeger-compact:
            enabled: false
        jaeger-grpc:
            enabled: false
        jaeger-thrift:
            enabled: false
        otlp:
            containerPort: 4317
            enabled: true
            hostPort: 0
            protocol: TCP
            servicePort: 4317
        otlp-http:
            enabled: false
        zipkin:
            enabled: false
    presets:
        clusterMetrics:
            enabled: false
        hostMetrics:
            enabled: false
        kubeletMetrics:
            enabled: false
        kubernetesAttributes:
            enabled: false
        logsCollection:
            enabled: false
            includeCollectorLogs: false
    replicaCount: 1
    resources:
        requests:
            cpu: 200m
            memory: 300Mi
    service:
        type: LoadBalancer
    tolerations: null
# Optional customization for the Gloo Platform Telemetry Gateway.
telemetryGatewayCustomization:
    # Disable cert generation for the Gloo Platform Telemetry Gateway.
    disableCertGeneration: false
    # Disables the default pipeline. Useful if you want to create a custom pipeline using 'extraPipelines' and to disable the default pipeline.
    disableDefaultPipeline: false
    # Configuration for extra exporters, such as to forward your data to a third-party provider. Exporters forward the data they get to a destination on the local or remote network.
    extraExporters: null
    # Specify any added receivers, processors, or exporters in an extra pipeline.
    extraPipelines: null
    # Configuration for extra processors to drop and generate new data. Processors can transform the data before it is forwarded to another processor and an exporter.
    extraProcessors:
        batch:
            send_batch_max_size: 3000
            send_batch_size: 2000
            timeout: 600ms
        memory_limiter:
            check_interval: 1s
            limit_percentage: 85
            spike_limit_percentage: 10
    # Configuration for extra receivers, such as to scrape extra Prometheus targets. Receivers listen on a network port to receive telemetry data.
    extraReceivers: null
    # Interval of time between reloading the TLS certificate of the telemetry gateway.
    reloadTlsCertificate: {}
    # SNI and certificate subject alternative name used in the telemetry gateway certificate.
    serverName: gloo-telemetry-gateway.gloo-mesh
    # Configure the service telemetry (logs and metrics) as described in the [otel-collector docs](https://opentelemetry.io/docs/collector/configuration/#service).
    telemetry:
        metrics:
            address: 0.0.0.0:8888

