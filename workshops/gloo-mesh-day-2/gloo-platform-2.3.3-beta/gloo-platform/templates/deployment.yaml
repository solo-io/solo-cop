# Code generated by skv2. DO NOT EDIT.



{{- $glooMeshMgmtServer := $.Values.glooMgmtServer}}
---

{{- define "gloo-mesh-mgmt-server.deploymentSpec"}}

# Deployment manifest for gloo-mesh-mgmt-server

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-mgmt-server
  annotations:
    app.kubernetes.io/name: gloo-mesh-mgmt-server
  name: gloo-mesh-mgmt-server
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-mesh-mgmt-server
  template:
    metadata:
      labels:
        app: gloo-mesh-mgmt-server
      annotations:
        app.kubernetes.io/name: gloo-mesh-mgmt-server
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: gloo-mesh-mgmt-server
      volumes:
      - name: license-keys
        secret:
          secretName: '{{ $.Values.licenseSecretName | default "license-keys" }}'
      - name: redis-auth-secrets
        secret:
          secretName: '{{ $.Values.redis.auth.secretName }}'
      - configMap:
          name: redis-client-config
        name: redis-client-config
      - name: redis-certs
        secret:
          secretName: '{{ $.Values.redis.certs.secretName }}'
      containers:
{{- $glooMeshMgmtServer := $.Values.glooMgmtServer }}
{{- $glooMeshMgmtServerImage := $glooMeshMgmtServer.image }}
      - name: gloo-mesh-mgmt-server
        image: {{ $glooMeshMgmtServerImage.registry }}/{{ $glooMeshMgmtServerImage.repository }}:{{ $glooMeshMgmtServerImage.tag }}
        imagePullPolicy: {{ $glooMeshMgmtServerImage.pullPolicy }}
        args:
        - run
        - --cluster={{ if $.Values.mgmtClusterName }}{{ $.Values.mgmtClusterName }}{{ else }}{{ if $.Values.common }}{{ $.Values.common.cluster }}{{ else }}{{ $.Values.global.cluster }}{{ end }}{{ end }}
        - --admin-namespace={{ $.Values.adminNamespace | default $.Release.Namespace }}
        - --grpc-port={{ $.Values.glooMgmtServer.ports.grpc }}
        - --stats-port={{ $.Values.glooMgmtServer.statsPort }}
        - --dev-logger={{ if $.Values.common }}{{ $.Values.glooMgmtServer.devMode | default  $.Values.common.devMode }}{{ else }}{{ $.Values.glooMgmtServer.devMode | default  $.Values.devMode }}{{ end }}
        - --relay-server-tls-secret-name={{ $.Values.glooMgmtServer.relay.tlsSecret.name }}
        - --relay-server-tls-secret-namespace={{ $.Values.glooMgmtServer.relay.tlsSecret.namespace | default $.Release.Namespace }}
        - --relay-tls-signing-secret-name={{ $.Values.glooMgmtServer.relay.signingTlsSecret.name }}
        - --relay-tls-signing-secret-namespace={{ $.Values.glooMgmtServer.relay.signingTlsSecret.namespace | default $.Release.Namespace }}
        - --relay-identity-token-secret-name={{ $.Values.glooMgmtServer.relay.tokenSecret.name }}
        - --relay-identity-token-secret-namespace={{ $.Values.glooMgmtServer.relay.tokenSecret.namespace | default $.Release.Namespace }}
        - --relay-identity-token-secret-key={{ $.Values.glooMgmtServer.relay.tokenSecret.key }}
        - --disable-relay-ca={{ $.Values.glooMgmtServer.relay.disableCa }}
        - --relay-push-rbac={{ $.Values.glooMgmtServer.relay.pushRbac }}
        - --cloud-resources-discovery-enabled={{ $.Values.glooMgmtServer.cloudResourcesDiscovery.enabled }}
        - --cloud-resources-discovery-polling-interval={{ $.Values.glooMgmtServer.cloudResourcesDiscovery.pollingInterval }}s
        - --max-grpc-message-size={{ $.Values.glooMgmtServer.maxGrpcMessageSize }}
        - --concurrency={{ $.Values.glooMgmtServer.concurrency }}
        - --enable-cluster-load-balancing={{ $.Values.glooMgmtServer.enableClusterLoadBalancing }}
        - --insecure={{ if $.Values.common }}{{ $.Values.glooMgmtServer.insecure | default  $.Values.common.insecure }}{{ else }}{{ $.Values.glooMgmtServer.insecure | default  $.Values.insecure }}{{ end }}
        - --verbose={{ if $.Values.common }}{{ $.Values.glooMgmtServer.verbose | default  $.Values.common.verbose }}{{ else }}{{ $.Values.glooMgmtServer.verbose | default  $.Values.verbose }}{{ end }}
        - --leader-election={{ if $.Values.common }}{{ $.Values.glooMgmtServer.leaderElection | default  $.Values.common.leaderElection }}{{ else }}{{ $.Values.glooMgmtServer.leaderElection | default  $.Values.leaderElection }}{{ end }}
        - --http-healthcheck-port={{ $.Values.glooMgmtServer.ports.healthcheck }}
        - --redis-address={{ $.Values.redis.deployment.addr | default $.Values.redis.address  }}
        - --feature-enable-gloo-network={{ $.Values.glooNetwork.enabled }}
        - --experimental-enable-ambient={{ $.Values.experimental.ambientEnabled }}
        - --legacy-metrics-pipeline={{ $.Values.legacyMetricsPipeline.enabled }}
        - --experimental-async-status-writes={{ $.Values.experimental.asyncStatusWrites }}
        - --read-only-generated-resources={{ if $.Values.common }}{{ $.Values.glooMgmtServer.readOnlyGeneratedResources | default  $.Values.common.readOnlyGeneratedResources }}{{ else }}{{ $.Values.glooMgmtServer.readOnlyGeneratedResources | default  $.Values.readOnlyGeneratedResources }}{{ end }}
{{- if $glooMeshMgmtServer.env }}
        env:
{{ toYaml $glooMeshMgmtServer.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /etc/license-keys
          name: license-keys
          readOnly: true
        - mountPath: /etc/redis-auth-secrets
          name: redis-auth-secrets
          readOnly: true
        - mountPath: /etc/redis-client-config
          name: redis-client-config
          readOnly: true
        - mountPath: /etc/redis-certs
          name: redis-certs
          readOnly: true
        resources:
{{- if $glooMeshMgmtServer.resources }}
{{ toYaml $glooMeshMgmtServer.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooMeshMgmtServer.securityContext) (eq "map[]" (printf "%v" $glooMeshMgmtServer.securityContext)) }}
{{ toYaml $glooMeshMgmtServer.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooMeshMgmtServer.securityContext true (eq "bool" (printf "%T" $glooMeshMgmtServer.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshMgmtServer.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshMgmtServer.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
      {{- if $glooMeshMgmtServerImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooMeshMgmtServerImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-mesh-mgmt-server.deploymentSpec" */}}

{{/* Render gloo-mesh-mgmt-server deployment template with overrides from values*/}}
{{- if $glooMeshMgmtServer.enabled }}
{{- $glooMeshMgmtServerDeploymentOverrides := dict }}
{{- if $glooMeshMgmtServer.deploymentOverrides }}
{{- $glooMeshMgmtServerDeploymentOverrides = $glooMeshMgmtServer.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooMeshMgmtServerDeploymentOverrides "gloo-mesh-mgmt-server.deploymentSpec") }}
{{- end }}
---

{{- if $glooMeshMgmtServer.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-mgmt-server
  {{- if $glooMeshMgmtServer.serviceAccount}}
  {{- if $glooMeshMgmtServer.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $glooMeshMgmtServer.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: gloo-mesh-mgmt-server
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "gloo-mesh-mgmt-server.serviceSpec"}}

# Service for gloo-mesh-mgmt-server
{{/* Define variables in function scope */}}
{{- $glooMeshMgmtServer := $.Values.glooMgmtServer}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-mgmt-server
  annotations:
    app.kubernetes.io/name: gloo-mesh-mgmt-server
    prometheus.io/path: /metrics
    prometheus.io/port: "9091"
    prometheus.io/scrape: "true"
  name: gloo-mesh-mgmt-server
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: gloo-mesh-mgmt-server
  type: {{ $glooMeshMgmtServer.serviceType }}
  ports:
  - name: healthcheck
    port: {{ $glooMeshMgmtServer.ports.healthcheck }}
  - name: grpc
    port: {{ $glooMeshMgmtServer.ports.grpc }}

{{- end }} {{/* define "gloo-mesh-mgmt-server.serviceSpec" */}}

{{- if $glooMeshMgmtServer.enabled }}
{{/* Render gloo-mesh-mgmt-server service template with overrides from values*/}}
{{- $glooMeshMgmtServerServiceOverrides := dict }}
{{- if $glooMeshMgmtServer.serviceOverrides }}
{{- $glooMeshMgmtServerServiceOverrides = $glooMeshMgmtServer.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooMeshMgmtServerServiceOverrides "gloo-mesh-mgmt-server.serviceSpec") }}
{{- end }}

---



{{- $glooMeshAgent := $.Values.glooAgent}}
---

{{- define "gloo-mesh-agent.deploymentSpec"}}

# Deployment manifest for gloo-mesh-agent

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-agent
  annotations:
    app.kubernetes.io/name: gloo-mesh-agent
  name: gloo-mesh-agent
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-mesh-agent
  template:
    metadata:
      labels:
        app: gloo-mesh-agent
      annotations:
        app.kubernetes.io/name: gloo-mesh-agent
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: gloo-mesh-agent
      containers:
{{- $glooMeshAgent := $.Values.glooAgent }}
{{- $glooMeshAgentImage := $glooMeshAgent.image }}
      - name: gloo-mesh-agent
        image: {{ $glooMeshAgentImage.registry }}/{{ $glooMeshAgentImage.repository }}:{{ $glooMeshAgentImage.tag }}
        imagePullPolicy: {{ $glooMeshAgentImage.pullPolicy }}
        args:
        - run
        - --cluster={{ if $.Values.common }}{{ $.Values.common.cluster }}{{ else }}{{ if $.Values.global }}{{ $.Values.global.cluster }}{{ else }}{{ $.Values.glooAgent.cluster }}{{ end }}{{ end }}
        - --stats-port={{ $.Values.glooAgent.ports.stats }}
        - --grpc-port={{ $.Values.glooAgent.ports.grpc }}
        - --gloo-network-scrape={{ if index .Values.glooAgent "gloo-network-agent" }}{{ index .Values.glooAgent "gloo-network-agent" "enabled" }}{{ else }}{{ false }}{{ end }}
        - --dev-logger={{ if $.Values.common }}{{ $.Values.glooAgent.devMode | default  $.Values.common.devMode }}{{ else }}{{ $.Values.glooAgent.devMode | default  $.Values.devMode }}{{ end }}
        - --relay-address={{ $.Values.glooAgent.relay.serverAddress }}
        - --relay-authority={{ $.Values.glooAgent.relay.authority }}
        - --relay-client-cert-secret-name={{ $.Values.glooAgent.relay.clientTlsSecret.name }}
        - --relay-client-cert-secret-namespace={{ $.Values.glooAgent.relay.clientTlsSecret.namespace | default $.Release.Namespace }}
        - --relay-client-cert-rotation-grace-period-ratio={{ $.Values.glooAgent.relay.clientTlsSecretRotationGracePeriodRatio }}
        - --relay-root-cert-secret-name={{ $.Values.glooAgent.relay.rootTlsSecret.name }}
        - --relay-root-cert-secret-namespace={{ $.Values.glooAgent.relay.rootTlsSecret.namespace | default $.Release.Namespace }}
        - --relay-identity-token-secret-name={{ $.Values.glooAgent.relay.tokenSecret.name }}
        - --relay-identity-token-secret-namespace={{ $.Values.glooAgent.relay.tokenSecret.namespace | default $.Release.Namespace }}
        - --relay-identity-token-secret-key={{ $.Values.glooAgent.relay.tokenSecret.key }}
        - --max-grpc-message-size={{ $.Values.glooAgent.maxGrpcMessageSize }}
        - --metrics-buffer-size={{ $.Values.glooAgent.metricsBufferSize }}
        - --access-logs-buffer-size={{ $.Values.glooAgent.accessLogsBufferSize }}
        - --relay-insecure={{ if $.Values.common }}{{ $.Values.glooAgent.insecure | default  $.Values.common.insecure }}{{ else }}{{ $.Values.glooAgent.insecure | default  $.Values.insecure }}{{ end }}
        - --verbose={{ if $.Values.common }}{{ $.Values.glooAgent.verbose | default  $.Values.common.verbose }}{{ else }}{{ $.Values.glooAgent.verbose | default  $.Values.verbose }}{{ end }}
        - --leader-election={{ if $.Values.common }}{{ $.Values.glooAgent.leaderElection | default  $.Values.common.leaderElection }}{{ else }}{{ $.Values.glooAgent.leaderElection | default  $.Values.leaderElection }}{{ end }}
        - --legacy-metrics-pipeline={{ not $.Values.telemetryCollector.enabled }}
        - --read-only-generated-resources={{ if $.Values.common }}{{ $.Values.glooAgent.readOnlyGeneratedResources | default  $.Values.common.readOnlyGeneratedResources }}{{ else }}{{ $.Values.glooAgent.readOnlyGeneratedResources | default  $.Values.readOnlyGeneratedResources }}{{ end }}
{{- if $glooMeshAgent.env }}
        env:
{{ toYaml $glooMeshAgent.env | indent 10 }}
{{- end }}
        resources:
{{- if $glooMeshAgent.resources }}
{{ toYaml $glooMeshAgent.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooMeshAgent.securityContext) (eq "map[]" (printf "%v" $glooMeshAgent.securityContext)) }}
{{ toYaml $glooMeshAgent.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooMeshAgent.securityContext true (eq "bool" (printf "%T" $glooMeshAgent.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshAgent.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshAgent.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
      {{- if $glooMeshAgentImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooMeshAgentImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-mesh-agent.deploymentSpec" */}}

{{/* Render gloo-mesh-agent deployment template with overrides from values*/}}
{{- if $glooMeshAgent.enabled }}
{{- $glooMeshAgentDeploymentOverrides := dict }}
{{- if $glooMeshAgent.deploymentOverrides }}
{{- $glooMeshAgentDeploymentOverrides = $glooMeshAgent.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooMeshAgentDeploymentOverrides "gloo-mesh-agent.deploymentSpec") }}
{{- end }}
---

{{- if $glooMeshAgent.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-agent
  {{- if $glooMeshAgent.serviceAccount}}
  {{- if $glooMeshAgent.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $glooMeshAgent.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: gloo-mesh-agent
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "gloo-mesh-agent.serviceSpec"}}

# Service for gloo-mesh-agent
{{/* Define variables in function scope */}}
{{- $glooMeshAgent := $.Values.glooAgent}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-agent
  annotations:
    app.kubernetes.io/name: gloo-mesh-agent
  name: gloo-mesh-agent
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: gloo-mesh-agent
  type: {{ $glooMeshAgent.serviceType }}
  ports:
  - name: http
    port: {{ $glooMeshAgent.ports.http }}
  - name: stats
    port: {{ $glooMeshAgent.ports.stats }}
  - name: grpc
    port: {{ $glooMeshAgent.ports.grpc }}

{{- end }} {{/* define "gloo-mesh-agent.serviceSpec" */}}

{{- if $glooMeshAgent.enabled }}
{{/* Render gloo-mesh-agent service template with overrides from values*/}}
{{- $glooMeshAgentServiceOverrides := dict }}
{{- if $glooMeshAgent.serviceOverrides }}
{{- $glooMeshAgentServiceOverrides = $glooMeshAgent.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooMeshAgentServiceOverrides "gloo-mesh-agent.serviceSpec") }}
{{- end }}

---



{{- $glooMeshUi := $.Values.glooUi}}
---

{{- define "gloo-mesh-ui.deploymentSpec"}}

# Deployment manifest for gloo-mesh-ui

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-ui
    gloo-mesh: gloo-mesh-ui
  annotations:
    app.kubernetes.io/name: gloo-mesh-ui
  name: gloo-mesh-ui
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-mesh-ui
      gloo-mesh: gloo-mesh-ui
  template:
    metadata:
      labels:
        app: gloo-mesh-ui
        gloo-mesh: gloo-mesh-ui
      annotations:
        app.kubernetes.io/name: gloo-mesh-ui
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: gloo-mesh-ui
      volumes:
      - name: license-keys
        secret:
          secretName: '{{ $.Values.licenseSecretName | default "license-keys" }}'
      - configMap:
          name: dashboard-envoy
        name: envoy-config
      - emptyDir: {}
        name: empty-cache
      - emptyDir: {}
        name: empty-run
      - name: redis-auth-secrets
        secret:
          secretName: '{{ $.Values.redis.auth.secretName }}'
      - name: redis-certs
        secret:
          secretName: '{{ $.Values.redis.certs.secretName }}'
      - configMap:
          name: redis-client-config
        name: redis-client-config
      containers:
{{- $glooMeshUi := $.Values.glooUi }}
{{- $glooMeshUiImage := $glooMeshUi.image }}
      - name: gloo-mesh-ui
        image: {{ $glooMeshUiImage.registry }}/{{ $glooMeshUiImage.repository }}:{{ $glooMeshUiImage.tag }}
        imagePullPolicy: {{ $glooMeshUiImage.pullPolicy }}
        args:
        - --cluster={{ if $.Values.mgmtClusterName }}{{ $.Values.mgmtClusterName }}{{ else }}{{ if $.Values.common }}{{ $.Values.common.cluster }}{{ else }}{{ if $.Values.global }}{{ $.Values.global.cluster }}{{ else }}{{ $.Values.cluster | default "mgmt-cluster" }}{{ end }}{{ end }}{{ end }}
        - --grpc-port={{ $.Values.glooUi.ports.grpc }}
        - --health-check-port={{ $.Values.glooUi.ports.healthcheck }}
        - --prometheus-url={{ if $.Values.common }}{{ $.Values.glooUi.prometheusUrl | default  $.Values.common.prometheusUrl }}{{ else }}{{ $.Values.glooUi.prometheusUrl | default  $.Values.prometheusUrl }}{{ end }}
        - --redis-address={{ $.Values.redis.deployment.addr | default $.Values.redis.address  }}
        - --verbose={{ if .Values.common}}{{ .Values.glooUi.verbose | default .Values.common.verbose }}{{ else }}{{ .Values.glooUi.verbose | default .Values.verbose }} {{end}}
        - --read-only-generated-resources={{ if $.Values.common }}{{ $.Values.glooUi.readOnlyGeneratedResources | default  $.Values.common.readOnlyGeneratedResources }}{{ else }}{{ $.Values.glooUi.readOnlyGeneratedResources | default  $.Values.readOnlyGeneratedResources }}{{ end }}
{{- if $glooMeshUi.env }}
        env:
{{ toYaml $glooMeshUi.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /etc/license-keys
          name: license-keys
          readOnly: true
        - mountPath: /etc/redis-auth-secrets
          name: redis-auth-secrets
          readOnly: true
        - mountPath: /etc/redis-client-config
          name: redis-client-config
          readOnly: true
        - mountPath: /etc/redis-certs
          name: redis-certs
          readOnly: true
        resources:
{{- if $glooMeshUi.resources }}
{{ toYaml $glooMeshUi.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooMeshUi.securityContext) (eq "map[]" (printf "%v" $glooMeshUi.securityContext)) }}
{{ toYaml $glooMeshUi.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooMeshUi.securityContext true (eq "bool" (printf "%T" $glooMeshUi.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshUi.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshUi.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
{{- $envoy := $.Values.glooUi.sidecars.envoy }}
{{- $envoyImage := $envoy.image }}
      - name: envoy
        image: {{ $envoyImage.registry }}/{{ $envoyImage.repository }}:{{ $envoyImage.tag }}
        imagePullPolicy: {{ $envoyImage.pullPolicy }}
{{- if $envoy.env }}
        env:
{{ toYaml $envoy.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
          readOnly: true
        resources:
{{- if $envoy.resources }}
{{ toYaml $envoy.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($envoy.securityContext) (eq "map[]" (printf "%v" $envoy.securityContext)) }}
{{ toYaml $envoy.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $envoy.securityContext true (eq "bool" (printf "%T" $envoy.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshUi.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshUi.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
        readinessProbe:
          httpGet:
            path: /
            port: 20202
          initialDelaySeconds: 5
          periodSeconds: 10
{{- $console := $.Values.glooUi.sidecars.console }}
{{- $consoleImage := $console.image }}
      - name: console
        image: {{ $consoleImage.registry }}/{{ $consoleImage.repository }}:{{ $consoleImage.tag }}
        imagePullPolicy: {{ $consoleImage.pullPolicy }}
{{- if $console.env }}
        env:
{{ toYaml $console.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /var/cache/nginx
          name: empty-cache
        - mountPath: /var/run
          name: empty-run
        resources:
{{- if $console.resources }}
{{ toYaml $console.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($console.securityContext) (eq "map[]" (printf "%v" $console.securityContext)) }}
{{ toYaml $console.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $console.securityContext true (eq "bool" (printf "%T" $console.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshUi.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshUi.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
        readinessProbe:
          httpGet:
            path: /
            port: 8090
          initialDelaySeconds: 5
          periodSeconds: 10
      {{- if $glooMeshUiImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooMeshUiImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-mesh-ui.deploymentSpec" */}}

{{/* Render gloo-mesh-ui deployment template with overrides from values*/}}
{{- if $glooMeshUi.enabled }}
{{- $glooMeshUiDeploymentOverrides := dict }}
{{- if $glooMeshUi.deploymentOverrides }}
{{- $glooMeshUiDeploymentOverrides = $glooMeshUi.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooMeshUiDeploymentOverrides "gloo-mesh-ui.deploymentSpec") }}
{{- end }}
---

{{- if $glooMeshUi.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-ui
  {{- if $glooMeshUi.serviceAccount}}
  {{- if $glooMeshUi.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $glooMeshUi.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: gloo-mesh-ui
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "gloo-mesh-ui.serviceSpec"}}

# Service for gloo-mesh-ui
{{/* Define variables in function scope */}}
{{- $glooMeshUi := $.Values.glooUi}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-ui
  annotations:
    app.kubernetes.io/name: gloo-mesh-ui
  name: gloo-mesh-ui
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: gloo-mesh-ui
  type: {{ $glooMeshUi.serviceType }}
  ports:
  - name: grpc
    port: {{ $glooMeshUi.ports.grpc }}
  - name: console
    port: {{ $glooMeshUi.ports.console }}
  - name: healthcheck
    port: {{ $glooMeshUi.ports.healthcheck }}

{{- end }} {{/* define "gloo-mesh-ui.serviceSpec" */}}

{{- if $glooMeshUi.enabled }}
{{/* Render gloo-mesh-ui service template with overrides from values*/}}
{{- $glooMeshUiServiceOverrides := dict }}
{{- if $glooMeshUi.serviceOverrides }}
{{- $glooMeshUiServiceOverrides = $glooMeshUi.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooMeshUiServiceOverrides "gloo-mesh-ui.serviceSpec") }}
{{- end }}

---



{{- $glooMeshRedis := $.Values.redis.deployment}}
---

{{- define "gloo-mesh-redis.deploymentSpec"}}

# Deployment manifest for gloo-mesh-redis

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-redis
    gloo-mesh: gloo-mesh-redis
  annotations:
    app.kubernetes.io/name: gloo-mesh-redis
  name: gloo-mesh-redis
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-mesh-redis
      gloo-mesh: gloo-mesh-redis
  template:
    metadata:
      labels:
        app: gloo-mesh-redis
        gloo-mesh: gloo-mesh-redis
      annotations:
        app.kubernetes.io/name: gloo-mesh-redis
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gloo-mesh-redis
      volumes:
      - emptyDir: {}
        name: data
      containers:
{{- $glooMeshRedis := $.Values.redis.deployment }}
{{- $glooMeshRedisImage := $glooMeshRedis.image }}
      - name: gloo-mesh-redis
        image: {{ $glooMeshRedisImage.registry }}/{{ $glooMeshRedisImage.repository }}:{{ $glooMeshRedisImage.tag }}
        imagePullPolicy: {{ $glooMeshRedisImage.pullPolicy }}
        args:
        - --save ""
        - --appendonly no
{{- if $glooMeshRedis.env }}
        env:
{{ toYaml $glooMeshRedis.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /redis-master-data
          name: data
        resources:
{{- if $glooMeshRedis.resources }}
{{ toYaml $glooMeshRedis.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooMeshRedis.securityContext) (eq "map[]" (printf "%v" $glooMeshRedis.securityContext)) }}
{{ toYaml $glooMeshRedis.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooMeshRedis.securityContext true (eq "bool" (printf "%T" $glooMeshRedis.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshRedis.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshRedis.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
      {{- if $glooMeshRedisImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooMeshRedisImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-mesh-redis.deploymentSpec" */}}

{{/* Render gloo-mesh-redis deployment template with overrides from values*/}}
{{- if and $glooMeshRedis.enabled $.Values.glooMgmtServer.enabled }}
{{- $glooMeshRedisDeploymentOverrides := dict }}
{{- if $glooMeshRedis.deploymentOverrides }}
{{- $glooMeshRedisDeploymentOverrides = $glooMeshRedis.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooMeshRedisDeploymentOverrides "gloo-mesh-redis.deploymentSpec") }}
{{- end }}
---

{{- if and $glooMeshRedis.enabled $.Values.glooMgmtServer.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-redis
  {{- if $glooMeshRedis.serviceAccount}}
  {{- if $glooMeshRedis.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $glooMeshRedis.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: gloo-mesh-redis
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "gloo-mesh-redis.serviceSpec"}}

# Service for gloo-mesh-redis
{{/* Define variables in function scope */}}
{{- $glooMeshRedis := $.Values.redis.deployment}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-redis
  annotations:
    app.kubernetes.io/name: gloo-mesh-redis
  name: gloo-mesh-redis
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: gloo-mesh-redis
  type: {{ $glooMeshRedis.serviceType }}
  ports:
  - name: redis
    port: {{ $glooMeshRedis.ports.redis }}

{{- end }} {{/* define "gloo-mesh-redis.serviceSpec" */}}

{{- if and $glooMeshRedis.enabled $.Values.glooMgmtServer.enabled }}
{{/* Render gloo-mesh-redis service template with overrides from values*/}}
{{- $glooMeshRedisServiceOverrides := dict }}
{{- if $glooMeshRedis.serviceOverrides }}
{{- $glooMeshRedisServiceOverrides = $glooMeshRedis.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooMeshRedisServiceOverrides "gloo-mesh-redis.serviceSpec") }}
{{- end }}

---



{{- $glooMeshPortalServer := $.Values.glooPortalServer}}
---

{{- define "gloo-mesh-portal-server.deploymentSpec"}}

# Deployment manifest for gloo-mesh-portal-server

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-portal-server
    gloo-mesh: gloo-mesh-portal
  annotations:
    app.kubernetes.io/name: gloo-mesh-portal-server
  name: gloo-mesh-portal-server
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-mesh-portal-server
      gloo-mesh: gloo-mesh-portal
  template:
    metadata:
      labels:
        app: gloo-mesh-portal-server
        gloo-mesh: gloo-mesh-portal
      annotations:
        app.kubernetes.io/name: gloo-mesh-portal-server
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gloo-mesh-portal-server
      volumes:
      - name: portal-storage-config
        secret:
          secretName: portal-storage-config
      containers:
{{- $glooMeshPortalServer := $.Values.glooPortalServer }}
{{- $glooMeshPortalServerImage := $glooMeshPortalServer.image }}
      - name: gloo-mesh-portal-server
        image: {{ $glooMeshPortalServerImage.registry }}/{{ $glooMeshPortalServerImage.repository }}:{{ $glooMeshPortalServerImage.tag }}
        imagePullPolicy: {{ $glooMeshPortalServerImage.pullPolicy }}
        args:
        - --cluster={{ if $.Values.mgmtClusterName }}{{ $.Values.mgmtClusterName }}{{ else }}{{ if $.Values.common }}{{ $.Values.common.cluster }}{{ else }}{{ if $.Values.global }}{{ $.Values.global.cluster }}{{ else }}{{ $.Values.cluster | default "mgmt-cluster" }}{{ end }}{{ end }}{{ end }}
        - --dev-logger={{ if $.Values.common }}{{ $.Values.glooPortalServer.devMode | default  $.Values.common.devMode }}{{ else }}{{ $.Values.glooPortalServer.devMode | default  $.Values.devMode }}{{ end }}
        - --verbose={{ if $.Values.common }}{{ $.Values.glooPortalServer.verbose | default  $.Values.common.verbose }}{{ else }}{{ $.Values.glooPortalServer.verbose | default  $.Values.verbose }}{{ end }}
        - --http-port={{ $.Values.glooPortalServer.ports.http }}
        - --api-key-storage-type={{ $.Values.glooPortalServer.apiKeyStorage.type }}
        - --api-key-storage-config-path {{ $.Values.glooPortalServer.apiKeyStorage.configPath }}
{{- if $glooMeshPortalServer.env }}
        env:
{{ toYaml $glooMeshPortalServer.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /etc/redis
          name: portal-storage-config
          readOnly: true
        resources:
{{- if $glooMeshPortalServer.resources }}
{{ toYaml $glooMeshPortalServer.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooMeshPortalServer.securityContext) (eq "map[]" (printf "%v" $glooMeshPortalServer.securityContext)) }}
{{ toYaml $glooMeshPortalServer.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooMeshPortalServer.securityContext true (eq "bool" (printf "%T" $glooMeshPortalServer.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMeshPortalServer.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMeshPortalServer.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
      {{- if $glooMeshPortalServerImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooMeshPortalServerImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-mesh-portal-server.deploymentSpec" */}}

{{/* Render gloo-mesh-portal-server deployment template with overrides from values*/}}
{{- if $glooMeshPortalServer.enabled }}
{{- $glooMeshPortalServerDeploymentOverrides := dict }}
{{- if $glooMeshPortalServer.deploymentOverrides }}
{{- $glooMeshPortalServerDeploymentOverrides = $glooMeshPortalServer.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooMeshPortalServerDeploymentOverrides "gloo-mesh-portal-server.deploymentSpec") }}
{{- end }}
---

{{- if $glooMeshPortalServer.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-portal-server
  {{- if $glooMeshPortalServer.serviceAccount}}
  {{- if $glooMeshPortalServer.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $glooMeshPortalServer.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: gloo-mesh-portal-server
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "gloo-mesh-portal-server.serviceSpec"}}

# Service for gloo-mesh-portal-server
{{/* Define variables in function scope */}}
{{- $glooMeshPortalServer := $.Values.glooPortalServer}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-portal-server
  annotations:
    app.kubernetes.io/name: gloo-mesh-portal-server
  name: gloo-mesh-portal-server
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: gloo-mesh-portal-server
  type: {{ $glooMeshPortalServer.serviceType }}
  ports:
  - name: http
    port: {{ $glooMeshPortalServer.ports.http }}

{{- end }} {{/* define "gloo-mesh-portal-server.serviceSpec" */}}

{{- if $glooMeshPortalServer.enabled }}
{{/* Render gloo-mesh-portal-server service template with overrides from values*/}}
{{- $glooMeshPortalServerServiceOverrides := dict }}
{{- if $glooMeshPortalServer.serviceOverrides }}
{{- $glooMeshPortalServerServiceOverrides = $glooMeshPortalServer.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooMeshPortalServerServiceOverrides "gloo-mesh-portal-server.serviceSpec") }}
{{- end }}

---

