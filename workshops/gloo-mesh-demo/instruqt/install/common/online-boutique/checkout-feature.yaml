apiVersion: v1
kind: Namespace
metadata:
  name: backend-apis
  labels:
    istio-injection: enabled
---
###########################################################
## Services
###########################################################
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
  labels:
    app: shippingservice
spec:
  type: ClusterIP
  selector:
    app: shippingservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
  labels:
    app: paymentservice
spec:
  selector:
    app: paymentservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
  labels:
    app: checkoutservice
spec:
  selector:
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
###########################################################
## Deployments
###########################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shipping
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
spec:
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
    spec:
      serviceAccountName: shipping
      containers:
      - name: server
        image: gcr.io/solo-test-236622/shippingservice:solo-build
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        readinessProbe:
          periodSeconds: 5
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
spec:
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
    spec:
      serviceAccountName: payment
      terminationGracePeriodSeconds: 5
      containers:
      - name: server
        image: gcr.io/solo-test-236622/paymentservice:solo-build
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: checkout
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
    spec:
      serviceAccountName: checkout
      containers:
        - name: server
          image: gcr.io/solo-test-236622/checkoutservice:solo-build
          imagePullPolicy: Always
          ports:
            - containerPort: 5050
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          env:
            - name: PORT
              value: "5050"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: "product-catalog.backend-apis-team.solo-io.mesh:80"
            - name: SHIPPING_SERVICE_ADDR
              value: "shipping.backend-apis-team.solo-io.mesh:80"
            - name: PAYMENT_SERVICE_ADDR
              value: "paymentservice.backend-apis.svc.cluster.local:50051"
            - name: EMAIL_SERVICE_ADDR
              value: "emailservice.backend-apis.svc.cluster.local:5000"
            - name: CURRENCY_SERVICE_ADDR
              value: "currency.backend-apis-team.solo-io.mesh:80"
            - name: CART_SERVICE_ADDR
              value: "cart.backend-apis-team.solo-io.mesh:80"
            - name: DISABLE_STATS
              value: "1"
            - name: DISABLE_TRACING
              value: "1"
            - name: DISABLE_PROFILER
              value: "1"
            - name: KUBERNETES_CLUSTER_NAME
              value: cluster2
          # - name: JAEGER_SERVICE_ADDR
          #   value: "jaeger-collector:14268"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
---
---
apiVersion: v1
kind: ServiceAccount
metadata: 
  name: checkout-loadgenerator
  namespace: backend-apis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout-loadgenerator
  namespace: backend-apis
spec:
  selector:
    matchLabels:
      app: checkout-loadgenerator
  replicas: 1
  template:
    metadata:
      labels:
        app: checkout-loadgenerator
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: checkout-loadgenerator
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      containers:
      - name: main
        image: golang:1.15.15
        env:
        - name: GO111MODULE
          value: "on"
        command:
            - /bin/sh
            - -c
            - >
                go get github.com/fullstorydev/grpcurl/cmd/grpcurl@latest && i=0;
                while [ $i -lt 10000 ];
                do
                  grpcurl --plaintext -d "{ \"userCurrency\": \"USD\", \"creditCard\": { \"creditCardNumber\": \"4432-8015-6152-0454\", \"creditCardCvv\": 123, \"creditCardExpirationYear\": 2023, \"creditCardExpirationMonth\": 12 }, \"address\": { \"streetAddress\": \"1600 Amphitheatre Parkway\", \"zipCode\": 94043, \"city\": \"Mountain View\", \"state\": \"CA\", \"country\": \"United States\" }, \"email\": \"someone@example.com\" }" -v --proto /demo.proto -import-path / checkout.backend-apis-team.solo-io.mesh:80 hipstershop.CheckoutService/PlaceOrder
                  grpcurl --plaintext -d "{ \"userCurrency\": \"USD\", \"creditCard\": { \"creditCardNumber\": \"4432-8015-6152-0454\", \"creditCardCvv\": 123, \"creditCardExpirationYear\": 2023, \"creditCardExpirationMonth\": 12 }, \"address\": { \"streetAddress\": \"1600 Amphitheatre Parkway\", \"zipCode\": 94043, \"city\": \"Mountain View\", \"state\": \"CA\", \"country\": \"United States\" }, \"email\": \"someone@example.com\" }" -v --proto /demo.proto -import-path / checkoutservice.backend-apis.svc.cluster.local:5050 hipstershop.CheckoutService/PlaceOrder
                  sleep 1
                done
        volumeMounts:
        - name: "protos"
          mountPath: "/demo.proto"
          subPath: "demo.proto"
      volumes:
        - name: "protos"
          configMap:
            name: "online-boutique-proto"
---
apiVersion: v1
kind: Service
metadata:
  name: checkout-loadgenerator
  namespace: backend-apis
  labels:
    app: loadgenerator
spec:
  type: ClusterIP
  selector:
    app: checkout-loadgenerator
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: online-boutique-proto
  namespace: backend-apis
data:
  demo.proto: |
    // Copyright 2020 Google LLC
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //      http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    syntax = "proto3";

    package hipstershop;

    // -----------------Cart service-----------------

    service CartService {
        rpc AddItem(AddItemRequest) returns (Empty) {}
        rpc GetCart(GetCartRequest) returns (Cart) {}
        rpc EmptyCart(EmptyCartRequest) returns (Empty) {}
    }

    message CartItem {
        string product_id = 1;
        int32  quantity = 2;
    }

    message AddItemRequest {
        string user_id = 1;
        CartItem item = 2;
    }

    message EmptyCartRequest {
        string user_id = 1;
    }

    message GetCartRequest {
        string user_id = 1;
    }

    message Cart {
        string user_id = 1;
        repeated CartItem items = 2;
    }

    message Empty {}

    // ---------------Recommendation service----------

    service RecommendationService {
      rpc ListRecommendations(ListRecommendationsRequest) returns (ListRecommendationsResponse){}
    }

    message ListRecommendationsRequest {
        string user_id = 1;
        repeated string product_ids = 2;
    }

    message ListRecommendationsResponse {
        repeated string product_ids = 1;
    }

    // ---------------Product Catalog----------------

    service ProductCatalogService {
        rpc ListProducts(Empty) returns (ListProductsResponse) {}
        rpc GetProduct(GetProductRequest) returns (Product) {}
        rpc SearchProducts(SearchProductsRequest) returns (SearchProductsResponse) {}
    }

    message Product {
        string id = 1;
        string name = 2;
        string description = 3;
        string picture = 4;
        Money price_usd = 5;

        // Categories such as "clothing" or "kitchen" that can be used to look up
        // other related products.
        repeated string categories = 6;
    }

    message ListProductsResponse {
        repeated Product products = 1;
    }

    message GetProductRequest {
        string id = 1;
    }

    message SearchProductsRequest {
        string query = 1;
    }

    message SearchProductsResponse {
        repeated Product results = 1;
    }

    // ---------------Shipping Service----------

    service ShippingService {
        rpc GetQuote(GetQuoteRequest) returns (GetQuoteResponse) {}
        rpc ShipOrder(ShipOrderRequest) returns (ShipOrderResponse) {}
    }

    message GetQuoteRequest {
        Address address = 1;
        repeated CartItem items = 2;
    }

    message GetQuoteResponse {
        Money cost_usd = 1;
    }

    message ShipOrderRequest {
        Address address = 1;
        repeated CartItem items = 2;
    }

    message ShipOrderResponse {
        string tracking_id = 1;
    }

    message Address {
        string street_address = 1;
        string city = 2;
        string state = 3;
        string country = 4;
        int32 zip_code = 5;
    }

    // -----------------Currency service-----------------

    service CurrencyService {
        rpc GetSupportedCurrencies(Empty) returns (GetSupportedCurrenciesResponse) {}
        rpc Convert(CurrencyConversionRequest) returns (Money) {}
    }

    // Represents an amount of money with its currency type.
    message Money {
        // The 3-letter currency code defined in ISO 4217.
        string currency_code = 1;

        // The whole units of the amount.
        // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
        int64 units = 2;

        // Number of nano (10^-9) units of the amount.
        // The value must be between -999,999,999 and +999,999,999 inclusive.
        // If `units` is positive, `nanos` must be positive or zero.
        // If `units` is zero, `nanos` can be positive, zero, or negative.
        // If `units` is negative, `nanos` must be negative or zero.
        // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
        int32 nanos = 3;
    }

    message GetSupportedCurrenciesResponse {
        // The 3-letter currency code defined in ISO 4217.
        repeated string currency_codes = 1;
    }

    message CurrencyConversionRequest {
        Money from = 1;

        // The 3-letter currency code defined in ISO 4217.
        string to_code = 2;
    }

    // -------------Payment service-----------------

    service PaymentService {
        rpc Charge(ChargeRequest) returns (ChargeResponse) {}
    }

    message CreditCardInfo {
        string credit_card_number = 1;
        int32 credit_card_cvv = 2;
        int32 credit_card_expiration_year = 3;
        int32 credit_card_expiration_month = 4;
    }

    message ChargeRequest {
        Money amount = 1;
        CreditCardInfo credit_card = 2;
    }

    message ChargeResponse {
        string transaction_id = 1;
    }

    // -------------Email service-----------------

    service EmailService {
        rpc SendOrderConfirmation(SendOrderConfirmationRequest) returns (Empty) {}
    }

    message OrderItem {
        CartItem item = 1;
        Money cost = 2;
    }

    message OrderResult {
        string   order_id = 1;
        string   shipping_tracking_id = 2;
        Money shipping_cost = 3;
        Address  shipping_address = 4;
        repeated OrderItem items = 5;
    }

    message SendOrderConfirmationRequest {
        string email = 1;
        OrderResult order = 2;
    }


    // -------------Checkout service-----------------

    service CheckoutService {
        rpc PlaceOrder(PlaceOrderRequest) returns (PlaceOrderResponse) {}
    }

    message PlaceOrderRequest {
        string user_id = 1;
        string user_currency = 2;

        Address address = 3;
        string email = 5;
        CreditCardInfo credit_card = 6;
    }

    message PlaceOrderResponse {
        OrderResult order = 1;
    }

    // ------------Ad service------------------

    service AdService {
        rpc GetAds(AdRequest) returns (AdResponse) {}
    }

    message AdRequest {
        // List of important key words from the current page describing the context.
        repeated string context_keys = 1;
    }

    message AdResponse {
        repeated Ad ads = 1;
    }

    message Ad {
        // url to redirect to when an ad is clicked.
        string redirect_url = 1;

        // short advertisement text to display.
        string text = 2;
    }
